#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use Getopt::Whatever;

use Curses;

BEGIN {
    eval { require TAEB; 1 };
    if ($@) {
        if ($@ =~ /Can't locate TAEB\.pm/) {
            die "You must run TAEB from the top-level directory. (run `cd ..`)";
        }
        die $@;
    }
}

# load_from_argv {{{
sub load_from_argv {
    my $second_level = shift;
    my $default = shift;
    my $arg_name = lc($second_level);
    $arg_name =~ s/.*:://;

    my $third_level = $ARGV{$arg_name}
                   || TAEB->config->contents->{$arg_name}
                   || $default;

    my $type = "TAEB::${second_level}::$third_level";

    eval "require $type; 1"
        or die $@;

    my %opts = %{ TAEB->config->contents->{ $arg_name.'_options' }->{ $third_level } || {} };
    return $type->new(%opts, @_);
}
# }}}

my $personality = load_from_argv('AI::Personality', 'RandomWalk');
TAEB->personality($personality);

if (TAEB->config->debug_personality) {
    my $action_weight = TAEB->personality->sort_behaviors;

    die "Personality has no behaviors.\n"
        unless keys %$action_weight;

    print "Personality " . Scalar::Util::blessed($personality) . ":\n";
    for my $action (sort {$action_weight->{$b}[0] <=> $action_weight->{$a}[0]} keys %$action_weight) {
        my ($urgency, $unweighted, $weight, $behavior) = @{ $action_weight->{$action} };
        printf "%10d  %s (%s)\n", $urgency, $action, $behavior;
    }

    exit 0;
}

my $interface = load_from_argv('Interface', 'Local');
TAEB->interface($interface);

# signal and terminal munging {{{
$SIG{__WARN__} = sub { TAEB->warning(@_) };
$SIG{__DIE__} = sub {
    require Carp::REPL;
    print "\ec";
    warn "@_";
    Carp::REPL::repl(@_);
} if TAEB->config->carp_repl;

# error-log any deaths
my $old_sigdie = $SIG{__DIE__};
$SIG{__DIE__} = sub {

    unless ("@_" =~ /Game over, man/) {
        TAEB->error("@_");
        TAEB->dump;
        endwin;
        $old_sigdie->(@_) if ref($old_sigdie) eq 'CODE';
    }

    endwin;
    die @_;
};

my $tstp = $SIG{TSTP} = sub {
    # if we don't invoke TSTP then we won't be suspended
    $SIG{TSTP} = 'DEFAULT';

    def_prog_mode();
    endwin();

    kill TSTP => $$;
};

$SIG{CONT} = sub {
    $SIG{TSTP} = $tstp;

    # force a redraw of the screen
    clear();
    TAEB->redraw;
    refresh();
};

$TAEB::ToScreen = 1;
$| = 1;

initscr;
END { endwin }
noecho;
cbreak;
start_color;
use_default_colors;
init_pair($_, $_, 0) for 0 .. 7;

$SIG{INT} = sub {
    TAEB->dump;
    die "In the future, use 'q' to save gracefully you dingbat.";
};

# }}}

addstr "Loading TAEB...";

while (1) {
    TAEB->iterate;
}

